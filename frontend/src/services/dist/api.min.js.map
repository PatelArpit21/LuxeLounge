{"version":3,"sources":["api.js"],"names":["_axios","_interopRequireDefault","require","api","axios","create","baseURL","headers","Content-Type","interceptors","request","use","config","stored","localStorage","getItem","token","JSON","parse","Authorization","e","response","error","data","message","non_field_errors","_typeof","firstKey","Object","keys","reject"],"mappings":"2FACA,IAAAA,OAAAC,uBAAAC,QAAA,mUAEA,IAAMC,IAAMC,OAAAA,QAAMC,OAAO,CACvBC,QAAS,4BACTC,QAAS,CAAEC,eAAgB,sBAG7BL,IAAIM,aAAaC,QAAQC,IAAI,SAACC,GAC5B,IACE,IAAMC,EAASC,aAAaC,QAAQ,YACpC,GAAIF,EAAQ,CAAA,IACFG,EAAUC,KAAKC,MAAML,GAArBG,MATFZ,IACVE,EAASC,QAAAK,EAAAL,SADc,GAEvBA,EAASA,QAAAY,cAATZ,UAAAA,OAASS,KAFX,MAAAI,IAME,OAAIR,IAEUT,IAAAM,aAAAY,SACQJ,IADR,SAAAI,GAAA,OAAAA,GAgBd,SAACC,GAdG,GAAAA,EAAIN,UAAOM,EAAAD,SAAAE,KAETX,GAAAA,EAAOL,SAAQY,KAAAA,iBAChBG,EAAAE,QAAAF,EAAAD,SAAAE,KAAAE,iBAAA,QACF,GAAA,WAAAC,QAAAJ,EAAAD,SAAAE,MAAA,CAGF,IAAAI,EAAAC,OAAAC,KAAAP,EAAAD,SAAAE,MAAA,GAeKD,EAAME,QAAUF,EAAMD,SAASE,KAAKI,GAAU,QAXtDL,EAAAE,QAAAF,EAAAD,SAAAE,KAEE,OAAcF,QAAdS,OAAAR,kBAIcD","file":"api.min.js","sourcesContent":["// src/services/api.js\r\nimport axios from 'axios';\r\n\r\nconst api = axios.create({\r\n  baseURL: 'http://127.0.0.1:8000/api',\r\n  headers: { 'Content-Type': 'application/json' },\r\n});\r\n\r\napi.interceptors.request.use((config) => {\r\n  try {\r\n    const stored = localStorage.getItem('luxeAuth');\r\n    if (stored) {\r\n      const { token } = JSON.parse(stored);\r\n      if (token) {\r\n        config.headers = config.headers || {};\r\n        config.headers.Authorization = `Bearer ${token}`;\r\n      }\r\n    }\r\n  } catch (e) {\r\n    // ignore\r\n  }\r\n  return config;\r\n});\r\n\r\n// Add response interceptor to handle errors\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    if (error.response && error.response.data) {\r\n      // Extract error message from response\r\n      if (error.response.data.non_field_errors) {\r\n        error.message = error.response.data.non_field_errors[0];\r\n      } else if (typeof error.response.data === 'object') {\r\n        // Get the first error message from the response\r\n        const firstKey = Object.keys(error.response.data)[0];\r\n        error.message = error.response.data[firstKey][0];\r\n      } else {\r\n        error.message = error.response.data;\r\n      }\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default api;"]}