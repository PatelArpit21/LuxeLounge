{"version":3,"sources":["useRoomAvailability.js"],"names":["_react","require","_api","_interopRequireDefault","useRoomAvailability","_useState2","_slicedToArray","useState","isAvailable","availableRooms","message","loading","error","availability","setAvailability","checkAvailability","roomId","checkIn","checkOut","response","errorMsg","regeneratorRuntime","async","_context","prev","next","abrupt","_objectSpread","awrap","api","post","sent","data","is_available","available_rooms","t0","stop","resetAvailability","room"],"mappings":"2FACA,IAAAA,OAAAC,QAAA,SACAC,KAAAC,uBAAAF,QAAA,65CAEA,IAAMG,oBAAsB,WAAM,IAAAC,EAAAC,gBACQ,EAAAN,OAAAO,UAAS,CAC/CC,aAAa,EALjBC,eAAA,EAOIC,QAAS,GANbC,SAAA,EAQIC,MAAO,OANuB,GACzBC,EADyBR,EAAA,GACXS,EADWT,EAAA,GASN,MAAA,CAAAQ,aAAAA,EAAAE,kBAAA,SAAOC,EAAQC,EAASC,GAAxB,IAAAC,EAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,GACnBT,GAAWC,GAAYC,EADJ,CAAAK,EAAAE,KAAA,EAAA,MAAA,OAEtBX,EAAgB,CACdN,aAAa,EACbC,eAAgB,EAChBC,QAAS,+BACTC,SAAS,EACTC,MAAO,OAPaW,EAAAG,OAAA,UAAA,KAAA,EAAA,OAYxBZ,EAAgB,SAAAU,GAAI,OAAAG,cAAA,GAAUH,EAAV,CAAgBb,SAAS,EAAMC,MAAO,SAZlCW,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAAAJ,mBAAAO,MARcC,KAAAA,QAAAC,KAAA,gCAAS,CAC/CtB,KAAAA,EACAC,SAAcQ,EACdP,UAH+CQ,KAQvB,KAAA,EAAA,OATMC,EASNI,EAAAQ,KATMjB,EAAA,CAAAN,YAAAW,EAAAa,KAAAC,aACzBpB,eADyBM,EAAAa,KAAAE,gBACXpB,QAAAA,EADWkB,KAAAtB,QAkC1BC,SAAS,EAzBTI,MAAAA,OAAoBQ,EAAAG,OAAA,SAAAP,EAAAa,KAAAC,cAAA,KAAA,GAAA,OAAAV,EAAAC,KAAA,GAAAD,EAAAY,GAAAZ,EAAA,MAAA,GAAAH,EAAAG,EAAAY,GAAAzB,SAAA,+BAAAI,EACnBE,CADmBR,aAAA,EAAAC,eAAA,EAAAC,QAAAU,EAoCpBT,SAAS,EAlCXG,MAAAA,IAFsBS,EAAAG,OAAA,UAIpBjB,GAJoB,KAAA,GAAA,IAAA,MAAA,OAAAc,EAAAa,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OAAAC,kBAEtB,WAFsBvB,EAAA,CA6CtBN,aAAa,EA7CSC,eAAA,EAYxBK,QAAAA,GAAoBH,SAAA,EAAgBA,MAAAA,mBAIhC2B","file":"useRoomAvailability.min.js","sourcesContent":["// src/hooks/useRoomAvailability.js\r\nimport { useState } from 'react';\r\nimport api from '../services/api';\r\n\r\nconst useRoomAvailability = () => {\r\n  const [availability, setAvailability] = useState({\r\n    isAvailable: true,\r\n    availableRooms: 0,\r\n    message: '',\r\n    loading: false,\r\n    error: null\r\n  });\r\n\r\n  const checkAvailability = async (roomId, checkIn, checkOut) => {\r\n    if (!roomId || !checkIn || !checkOut) {\r\n      setAvailability({\r\n        isAvailable: false,\r\n        availableRooms: 0,\r\n        message: 'Please select room and dates',\r\n        loading: false,\r\n        error: null\r\n      });\r\n      return;\r\n    }\r\n\r\n    setAvailability(prev => ({ ...prev, loading: true, error: null }));\r\n\r\n    try {\r\n      const response = await api.post('/bookings/check_availability/', {\r\n        room: roomId,\r\n        check_in: checkIn,\r\n        check_out: checkOut\r\n      });\r\n\r\n      setAvailability({\r\n        isAvailable: response.data.is_available,\r\n        availableRooms: response.data.available_rooms,\r\n        message: response.data.message,\r\n        loading: false,\r\n        error: null\r\n      });\r\n\r\n      return response.data.is_available;\r\n    } catch (error) {\r\n      const errorMsg = error.message || 'Failed to check availability';\r\n      setAvailability({\r\n        isAvailable: false,\r\n        availableRooms: 0,\r\n        message: errorMsg,\r\n        loading: false,\r\n        error: errorMsg\r\n      });\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const resetAvailability = () => {\r\n    setAvailability({\r\n      isAvailable: true,\r\n      availableRooms: 0,\r\n      message: '',\r\n      loading: false,\r\n      error: null\r\n    });\r\n  };\r\n\r\n  return { availability, checkAvailability, resetAvailability };\r\n};\r\n\r\nexport default useRoomAvailability;"]}