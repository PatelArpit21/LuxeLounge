{"version":3,"sources":["useRevealOnScroll.js"],"names":["_react","require","useRevealOnScroll","root","arguments","length","undefined","useEffect","observer","IntersectionObserver","entries","forEach","entry","isIntersecting","target","classList","add","threshold","unobserve","el","observe","disconnect"],"mappings":"sGAAA,IAAAA,OAAAC,QAAA,SAEe,SAASC,oBAA+B,IAAbC,EAAa,EAAAC,UAAAC,aAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAN,MAC/C,EAAAJ,OAAAO,WAAU,WACR,IAAMC,EAAW,IAAIC,qBACnB,SAACC,GACCA,EAAQC,QAAQ,SAACC,GANzBA,EAAAC,iBAQYD,EAAME,OAAOC,UAAUC,IAAI,UANfd,EAAAA,UAA+BU,EAAAE,YAI/CJ,CAAAA,KAAAA,EAAQC,WAAQ,mBAAWM,UAAA,MAM5B,OAHcC,SAAUN,iBAAnB,qCACDD,QAAA,SAAAQ,GAAA,OAAAX,EAAAY,QAAAD,KAGL,WAAA,OAAAX,EAAAa,eAAElB,CAAAA","file":"useRevealOnScroll.min.js","sourcesContent":["import { useEffect } from 'react';\r\n\r\nexport default function useRevealOnScroll(root = null) {\r\n  useEffect(() => {\r\n    const observer = new IntersectionObserver(\r\n      (entries) => {\r\n        entries.forEach((entry) => {\r\n          if (entry.isIntersecting) {\r\n            entry.target.classList.add('reveal');\r\n            observer.unobserve(entry.target);\r\n          }\r\n        });\r\n      },\r\n      { root, rootMargin: '0px 0px -10% 0px', threshold: 0.15 }\r\n    );\r\n\r\n    const candidates = document.querySelectorAll('.anim-fade, .anim-up, .anim-scale');\r\n    candidates.forEach((el) => observer.observe(el));\r\n\r\n    return () => observer.disconnect();\r\n  }, [root]);\r\n}"]}